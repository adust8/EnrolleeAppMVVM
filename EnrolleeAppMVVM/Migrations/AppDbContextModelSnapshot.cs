// <auto-generated />
using System;
using EFDataAccessLibrary.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EnrolleeAppMVVM.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CS_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFDataAccessLibrary.Models.Enrollee", b =>
                {
                    b.Property<Guid>("EnrolleeGUID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("EducationId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("GPA")
                        .HasMaxLength(100)
                        .HasColumnType("float");

                    b.Property<string>("PassportId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserGUID")
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EnrolleeGUID");

                    b.HasIndex("EducationId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserGUID");

                    b.ToTable("Enrollees");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Enrollee_Specialities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("EnrolleeGUID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SpecialityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EnrolleeGUID");

                    b.HasIndex("SpecialityId");

                    b.ToTable("Enrollees_Specialities");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            RoleName = "Абитуриент"
                        },
                        new
                        {
                            RoleId = 2,
                            RoleName = "Администратор"
                        });
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FinancingId")
                        .HasColumnType("int");

                    b.Property<int>("MinimumEducationLevel")
                        .HasColumnType("int");

                    b.Property<int>("NameId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("SpecialityCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudyPeriodId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("SpecialityId");

                    b.HasIndex("FinancingId");

                    b.HasIndex("MinimumEducationLevel");

                    b.HasIndex("NameId");

                    b.HasIndex("StudyPeriodId");

                    b.ToTable("Specialities");

                    b.HasData(
                        new
                        {
                            SpecialityId = 1,
                            FinancingId = 1,
                            MinimumEducationLevel = 1,
                            NameId = 1,
                            SpecialityCode = "15.01",
                            StudyPeriodId = 1
                        },
                        new
                        {
                            SpecialityId = 2,
                            FinancingId = 2,
                            MinimumEducationLevel = 1,
                            NameId = 1,
                            SpecialityCode = "15.02",
                            StudyPeriodId = 1
                        },
                        new
                        {
                            SpecialityId = 3,
                            FinancingId = 1,
                            MinimumEducationLevel = 1,
                            NameId = 2,
                            SpecialityCode = "16.01",
                            StudyPeriodId = 2
                        },
                        new
                        {
                            SpecialityId = 4,
                            FinancingId = 2,
                            MinimumEducationLevel = 1,
                            NameId = 2,
                            SpecialityCode = "16.02",
                            StudyPeriodId = 2
                        },
                        new
                        {
                            SpecialityId = 5,
                            FinancingId = 1,
                            MinimumEducationLevel = 1,
                            NameId = 3,
                            SpecialityCode = "17.01",
                            StudyPeriodId = 3
                        },
                        new
                        {
                            SpecialityId = 6,
                            FinancingId = 2,
                            MinimumEducationLevel = 1,
                            NameId = 3,
                            SpecialityCode = "17.02",
                            StudyPeriodId = 3
                        },
                        new
                        {
                            SpecialityId = 7,
                            FinancingId = 1,
                            MinimumEducationLevel = 2,
                            NameId = 4,
                            SpecialityCode = "18.01",
                            StudyPeriodId = 4
                        },
                        new
                        {
                            SpecialityId = 8,
                            FinancingId = 2,
                            MinimumEducationLevel = 2,
                            NameId = 4,
                            SpecialityCode = "18.02",
                            StudyPeriodId = 4
                        },
                        new
                        {
                            SpecialityId = 9,
                            FinancingId = 2,
                            MinimumEducationLevel = 2,
                            NameId = 5,
                            SpecialityCode = "19.01",
                            StudyPeriodId = 4
                        });
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            StatusName = "Принято"
                        },
                        new
                        {
                            StatusId = 2,
                            StatusName = "Подано"
                        },
                        new
                        {
                            StatusId = 3,
                            StatusName = "Отказано"
                        },
                        new
                        {
                            StatusId = 4,
                            StatusName = "Ожидается"
                        });
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.User", b =>
                {
                    b.Property<Guid>("UserGUID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastPasswordChangeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("UserGUID");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EnrolleeAppMVVM.Data.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EducationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationId");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            EducationId = 1,
                            EducationName = "Основное общее образование"
                        },
                        new
                        {
                            EducationId = 2,
                            EducationName = "Среднее общее образование"
                        });
                });

            modelBuilder.Entity("EnrolleeAppMVVM.Data.Models.Financing", b =>
                {
                    b.Property<int>("FinancingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FinancingName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FinancingId");

                    b.ToTable("Financing");

                    b.HasData(
                        new
                        {
                            FinancingId = 1,
                            FinancingName = "Бюджетное финансирование"
                        },
                        new
                        {
                            FinancingId = 2,
                            FinancingName = "Коммерческое финансирование"
                        });
                });

            modelBuilder.Entity("EnrolleeAppMVVM.Data.Models.SpecialityName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecialityNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Поварское дело"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Программирование"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Туризм на базе 9 классов"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Туризм на базе 11 классов"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Системное администрирование на базе 11 класса"
                        });
                });

            modelBuilder.Entity("EnrolleeAppMVVM.Data.Models.StudyPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StudyPeriods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Period = "1 год 10 мес."
                        },
                        new
                        {
                            Id = 2,
                            Period = "3 года 11 мес."
                        },
                        new
                        {
                            Id = 3,
                            Period = "2 года 5 мес."
                        },
                        new
                        {
                            Id = 4,
                            Period = "1 год 5 мес."
                        });
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Enrollee", b =>
                {
                    b.HasOne("EnrolleeAppMVVM.Data.Models.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationId");

                    b.HasOne("EFDataAccessLibrary.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Enrollee_Specialities", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Enrollee", "Enrollee")
                        .WithMany()
                        .HasForeignKey("EnrolleeGUID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFDataAccessLibrary.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Enrollee");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Speciality", b =>
                {
                    b.HasOne("EnrolleeAppMVVM.Data.Models.Financing", "Financing")
                        .WithMany()
                        .HasForeignKey("FinancingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolleeAppMVVM.Data.Models.Education", "Education")
                        .WithMany()
                        .HasForeignKey("MinimumEducationLevel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolleeAppMVVM.Data.Models.SpecialityName", "SpecialityName")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EnrolleeAppMVVM.Data.Models.StudyPeriod", "StudyPeriod")
                        .WithMany()
                        .HasForeignKey("StudyPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Financing");

                    b.Navigation("SpecialityName");

                    b.Navigation("StudyPeriod");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.User", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
