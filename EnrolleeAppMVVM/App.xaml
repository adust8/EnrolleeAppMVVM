<Application x:Class="EnrolleeAppMVVM.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:EnrolleeAppMVVM"
             xmlns:components="clr-namespace:EnrolleeAppMVVM.Services.Components"
             xmlns:vm ="clr-namespace:EnrolleeAppMVVM.ViewModel"
             xmlns:vw ="clr-namespace:EnrolleeAppMVVM.View"
             xmlns:wpf="http://materialdesigninxaml.net/winfx/xaml/themes"
             StartupUri="View/SignInWindow.xaml"
             >

    <Application.Resources>
        <ResourceDictionary >
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFBBCED0"/>

        <DataTemplate DataType="{x:Type vm:LoginUserControlViewModel}">
            <vw:LoginUserControl/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:SignUpWindowViewModel}">
            <vw:SignUpUserControl/>
        </DataTemplate>
            
        <DataTemplate DataType="{x:Type vm:EnrolleePersonalCabinetVM}">
            <vw:EnrolleePersonalCabinet/>
        </DataTemplate>
            
        <DataTemplate DataType="{x:Type vm:ApplicationVM}">
            <vw:ApplicationUserControl/>
        </DataTemplate>
        <DataTemplate DataType="{x:Type vm:SettingsVM}">
            <vw:SettingsUserControl/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:ChangePasswordVM}">
            <vw:ChangePasswordUserControl/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:DeleteAccountVM}">
            <vw:DeleteAccountUserControl/>
        </DataTemplate>

            <Style x:Key="CustomMaterialDesignTextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBoxBase}">
                <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource CustomMaterialDesignValidationErrorTemplate}"/>
                <Setter Property="FontSize" Value="16"/>
            </Style>

            <Style x:Key="CustomMaterialDesignButton" TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignFlatButton}">
                <Setter Property="Foreground" Value="#4994f5"/>
            </Style>


            <Style x:Key="CustomMaterialDesignBindablePasswordBox" TargetType="{x:Type components:BindablePasswordBox}" BasedOn="{StaticResource {x:Type UserControl}}">
                <Setter Property="Validation.ErrorTemplate" Value="{DynamicResource CustomMaterialDesignValidationErrorTemplate}"/>
            </Style>

            <ControlTemplate x:Key="CustomMaterialDesignValidationErrorTemplate">
            <ControlTemplate.Resources>
                <DataTemplate DataType="{x:Type ValidationError}">
                    <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}"
                       FontSize="20"
                       MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                       HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.HorizontalAlignment)}"
                       Margin="2"
                       TextWrapping="Wrap"
                       Text="{Binding ErrorContent}"
                       UseLayoutRounding="false" />
                </DataTemplate>
            </ControlTemplate.Resources>
            <StackPanel>
                <AdornedElementPlaceholder Name="Placeholder" />
                <Border x:Name="DefaultErrorViewer"
                Visibility="Collapsed"
                Background="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Background)}">
                    <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}"
                       FontSize="12"
                       MaxWidth="{Binding ElementName=Placeholder, Path=ActualWidth}"
                       HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.HorizontalAlignment)}"
                       Margin="0 2"
                       TextWrapping="Wrap"
                       Text="{Binding CurrentItem.ErrorContent}"
                       UseLayoutRounding="false" />
                </Border>
                <wpf:PopupEx x:Name="ValidationPopup"
                     IsOpen="False"
                     Placement="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.PopupPlacement)}"
                     PlacementTarget="{Binding ElementName=Placeholder, Mode=OneWay}"
                     AllowsTransparency="True">
                    <Border x:Name="PopupBorder" Background="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Background)}">
                        <TextBlock Foreground="{DynamicResource MaterialDesignValidationErrorBrush}"
                           FontSize="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.FontSize)}"
                           HorizontalAlignment="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.HorizontalAlignment)}"
                           Margin="0 2"
                           TextWrapping="Wrap"
                           Text="{Binding CurrentItem.ErrorContent}"
                           UseLayoutRounding="false" />
                    </Border>
                </wpf:PopupEx>
            </StackPanel>
            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="False"/>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="True"/>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Suppress)}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="ValidationPopup" Property="IsOpen" Value="True"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="False"/>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="False"/>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Suppress)}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="DefaultErrorViewer" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="True"/>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="ValidationPopup" Property="IsOpen"
                        Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay}"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.OnlyShowOnFocus)}" Value="True"/>
                        <Condition Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.UsePopup)}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <MultiDataTrigger.Setters>
                        <Setter TargetName="DefaultErrorViewer" Property="Visibility"
                        Value="{Binding ElementName=Placeholder, Path=AdornedElement.IsKeyboardFocusWithin, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    </MultiDataTrigger.Setters>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:ValidationAssist.Background)}" Value="{x:Null}">
                    <Setter TargetName="PopupBorder" Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
                    <Setter TargetName="DefaultErrorViewer" Property="Background" Value="{DynamicResource MaterialDesignPaper}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=Placeholder, Path=AdornedElement.(wpf:TextFieldAssist.HasOutlinedTextField)}" Value="True">
                    <Setter TargetName="DefaultErrorViewer" Property="Margin" Value="0,2,0,0"/>
                    <Setter TargetName="ValidationPopup" Property="VerticalOffset" Value="2"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style TargetType="{x:Type Button}" x:Key="TitleButtons">
        <Style.Triggers>
            <EventTrigger x:Name="ToWhite" RoutedEvent="MouseEnter">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Button.Foreground).Color" Duration="0:0:0:0.1" From="#FF5D5757" To="White" FillBehavior="HoldEnd"/>
                        <ColorAnimation Storyboard.TargetProperty="(Button.Background).Color" Duration="0:0:0:0.1" To="#FFBBCED0" FillBehavior="HoldEnd"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            
            <EventTrigger x:Name="FromWhite" RoutedEvent="MouseLeave">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(Button.Foreground).Color" Duration="0:0:0:0.1" From="White" To="#FF5D5757"/>
                        <ColorAnimation Storyboard.TargetProperty="(Button.Background).Color" Duration="0:0:0:0.1" To="#FFBBCED0"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
        </Style>

            


            <Style TargetType="TextBlock" x:Key="DefaultTextBlockStyle">
                <Setter Property="Height" Value="25"/>
                <Setter Property="Width" Value="100"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="FontSize" Value="20"/>
                <Setter Property="FontStretch" Value="UltraCondensed"/>
                <Setter Property="Foreground" Value="#FF5B5858"/>
            </Style>
            
            <Style x:Key="CustomTextBoxStyle" TargetType="TextBox">
            <Setter Property="Background" Value="White"/>
            <Setter Property="BorderBrush" Value="#807b7a"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="Black"/>
            
            
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>

            <Setter Property="FontSize" Value="50"/>
            
            <Setter Property="Width" Value="130" />
            <Setter Property="Height" Value="25" />

            <Setter Property="Focusable" Value="True" />
            <Setter Property="AllowDrop" Value="true"/>

                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <AdornedElementPlaceholder />
                                <ItemsControl                                           
                                    FontSize="12"
                                    ItemsSource="{Binding }">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <TextBlock TextAlignment="Center" Width="290" Margin="-130 0 0 0" Foreground="OrangeRed" Text="{Binding ErrorContent}" />
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border 
                            SnapsToDevicePixels="True"
                            Name="Border"
                            CornerRadius="2"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            
                            >
                            <ScrollViewer x:Name="PART_ContentHost"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Hidden"
                                          VerticalScrollBarVisibility="Hidden"
                                          />
                        </Border>


                        <ControlTemplate.Triggers>
                            <Trigger Property="IsKeyboardFocused" Value="True">
                                <Setter Property="BorderBrush" TargetName="Border" Value="#3399ff"/>
                                <Setter Property="BorderThickness" TargetName="Border" Value="2"/>
                            </Trigger>
                            <Trigger Property="IsKeyboardFocused" Value="False">
                                <Setter Property="BorderBrush" TargetName="Border" Value="#807b7a"/>
                                <Setter Property="BorderThickness" TargetName="Border" Value="1"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>


        <Style TargetType="Button" x:Key="ButtonStyle">
                <Setter Property="Height" Value="30"/>
                <Setter Property="Width" Value="130"/>
                <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="BorderBrush" Value="Black"/>
        </Style>

        <Style TargetType="DatePicker" x:Key="DatePickerStyle">
            <Setter Property="Width" Value="90"/>
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Height" Value="23"/>
            <Setter Property="Margin" Value="0 20 0 0"/>
            <Setter Property="Margin" Value="0 20 0 0"/>
        </Style>







            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary  Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary  Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary  Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary  Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
